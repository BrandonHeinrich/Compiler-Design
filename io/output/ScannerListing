    1: $INIT
      A
    -A Token#=1, Length=5, Text="$INIT"

    2: /* IOMngrDriver.c
    3:    Something should not be in the table.
    4: */
    5: #include <stdio.h>
        A        B     C
    -A Token#=3, Length=7, Text="include"
    -B Token#=3, Length=5, Text="stdio"
    -C Token#=3, Length=1, Text="h"

    6: #include <string.h>
        A        B      C
    -A Token#=3, Length=7, Text="include"
    -B Token#=3, Length=6, Text="string"
    -C Token#=3, Length=1, Text="h"

    7: #include <ctype.h>

        A        B     C
    -A Token#=3, Length=7, Text="include"
    -B Token#=3, Length=5, Text="ctype"
    -C Token#=3, Length=1, Text="h"

    8: #include "IOMngr.h"

        A        B      C
    -A Token#=3, Length=7, Text="include"
    -B Token#=3, Length=6, Text="IOMngr"
    -C Token#=3, Length=1, Text="h"

    9: int
       A
    -A Token#=3, Length=3, Text="int"

   10: main(int argc, char **argv)
       A    B   C     D      E
    -A Token#=3, Length=4, Text="main"
    -B Token#=3, Length=3, Text="int"
    -C Token#=3, Length=4, Text="argc"
    -D Token#=3, Length=4, Text="char"
    -E Token#=3, Length=4, Text="argv"

   11: { char curChar;
      A  B    C
    -A Token#=7, Length=1, Text="{"
    -B Token#=3, Length=4, Text="char"
    -C Token#=3, Length=7, Text="curChar"

   12:   char *src, *lst;
         A     B     C
    -A Token#=3, Length=4, Text="char"
    -B Token#=3, Length=3, Text="src"
    -C Token#=3, Length=3, Text="lst"

   13:   
   14:  if (argc == 1) {
        A   B       C D
    -A Token#=3, Length=2, Text="if"
    -B Token#=3, Length=4, Text="argc"
    -C Token#=4, Length=1, Text="1"
    -D Token#=7, Length=1, Text="{"

   15:    src = "IOMngrSource";
          A      B
    -A Token#=3, Length=3, Text="src"
    -B Token#=3, Length=12, Text="IOMngrSource"

   16:   lst = "IOMngrListing";
         A      B
    -A Token#=3, Length=3, Text="lst"
    -B Token#=3, Length=13, Text="IOMngrListing"

   17:  }
       A
    -A Token#=6, Length=1, Text="}"

   18:   else if (argc == 2) {
         A    B   C       D E
    -A Token#=3, Length=4, Text="else"
    -B Token#=3, Length=2, Text="if"
    -C Token#=3, Length=4, Text="argc"
    -D Token#=4, Length=1, Text="2"
    -E Token#=7, Length=1, Text="{"

   19:     src = argv[1];
           A     B    C
    -A Token#=3, Length=3, Text="src"
    -B Token#=3, Length=4, Text="argv"
    -C Token#=4, Length=1, Text="1"

   20:     lst = NULL;
           A     B
    -A Token#=3, Length=3, Text="lst"
    -B Token#=3, Length=4, Text="NULL"

   21:   }
        A
    -A Token#=6, Length=1, Text="}"

   22:   else if (argc == 3) {
         A    B   C       D E
    -A Token#=3, Length=4, Text="else"
    -B Token#=3, Length=2, Text="if"
    -C Token#=3, Length=4, Text="argc"
    -D Token#=4, Length=1, Text="3"
    -E Token#=7, Length=1, Text="{"

   23:     src = argv[1];
           A     B    C
    -A Token#=3, Length=3, Text="src"
    -B Token#=3, Length=4, Text="argv"
    -C Token#=4, Length=1, Text="1"

   24:     lst = argv[2];
           A     B    C
    -A Token#=3, Length=3, Text="lst"
    -B Token#=3, Length=4, Text="argv"
    -C Token#=4, Length=1, Text="2"

   25:   }
        A
    -A Token#=6, Length=1, Text="}"

   26:   else {
         A   B
    -A Token#=3, Length=4, Text="else"
    -B Token#=7, Length=1, Text="{"

   27:     fprintf(stderr,"usage: IOMngrDriver SourceName [ListingName]\n");
           A       B       C      D            E           F            G
    -A Token#=3, Length=7, Text="fprintf"
    -B Token#=3, Length=6, Text="stderr"
    -C Token#=3, Length=5, Text="usage"
    -D Token#=3, Length=12, Text="IOMngrDriver"
    -E Token#=3, Length=10, Text="SourceName"
    -F Token#=3, Length=11, Text="ListingName"
    -G Token#=3, Length=1, Text="n"

   28:     exit(1);
           A    B
    -A Token#=3, Length=4, Text="exit"
    -B Token#=4, Length=1, Text="1"

   29:   }
        A
    -A Token#=6, Length=1, Text="}"

   30:   
   31: /* This should not get in the table. */

   32:   if (OpenFiles(src,lst)) {
         A   B         C   D    E
    -A Token#=3, Length=2, Text="if"
    -B Token#=3, Length=9, Text="OpenFiles"
    -C Token#=3, Length=3, Text="src"
    -D Token#=3, Length=3, Text="lst"
    -E Token#=7, Length=1, Text="{"

   33:     while((curChar = GetSourceChar()) != EOF) {
           A      B         C                   D   E
    -A Token#=3, Length=5, Text="while"
    -B Token#=3, Length=7, Text="curChar"
    -C Token#=3, Length=13, Text="GetSourceChar"
    -D Token#=3, Length=3, Text="EOF"
    -E Token#=7, Length=1, Text="{"

   34:       if (isupper(curChar)) {
             A   B       C        D
    -A Token#=3, Length=2, Text="if"
    -B Token#=3, Length=7, Text="isupper"
    -C Token#=3, Length=7, Text="curChar"
    -D Token#=7, Length=1, Text="{"

   35:         PostMessage(GetCurrentColumn(),"found uppercase");
               A           B                   C     D
    -A Token#=3, Length=11, Text="PostMessage"
    -B Token#=3, Length=16, Text="GetCurrentColumn"
    -C Token#=3, Length=5, Text="found"
    -D Token#=3, Length=9, Text="uppercase"

   36:       }
            A
    -A Token#=6, Length=1, Text="}"

   37:       if (strchr("(){}",curChar)) {
             A   B        CD   E        F
    -A Token#=3, Length=2, Text="if"
    -B Token#=3, Length=6, Text="strchr"
    -C Token#=7, Length=1, Text="{"
    -D Token#=6, Length=1, Text="}"
    -E Token#=3, Length=7, Text="curChar"
    -F Token#=7, Length=1, Text="{"

   38:         PostMessage(GetCurrentColumn(),"found grouping symbol");
               A           B                   C     D        E
    -A Token#=3, Length=11, Text="PostMessage"
    -B Token#=3, Length=16, Text="GetCurrentColumn"
    -C Token#=3, Length=5, Text="found"
    -D Token#=3, Length=8, Text="grouping"
    -E Token#=3, Length=6, Text="symbol"

   39:       }
            A
    -A Token#=6, Length=1, Text="}"

   40:       if (strchr(",;",curChar)) {
             A   B           C        D
    -A Token#=3, Length=2, Text="if"
    -B Token#=3, Length=6, Text="strchr"
    -C Token#=3, Length=7, Text="curChar"
    -D Token#=7, Length=1, Text="{"

   41:         PostMessage(GetCurrentColumn(),"found punctuation");
               A           B                   C     D
    -A Token#=3, Length=11, Text="PostMessage"
    -B Token#=3, Length=16, Text="GetCurrentColumn"
    -C Token#=3, Length=5, Text="found"
    -D Token#=3, Length=11, Text="punctuation"

   42:       }
            A
    -A Token#=6, Length=1, Text="}"

   43:       if (strchr("=*",curChar)) {
             A   B           C        D
    -A Token#=3, Length=2, Text="if"
    -B Token#=3, Length=6, Text="strchr"
    -C Token#=3, Length=7, Text="curChar"
    -D Token#=7, Length=1, Text="{"

   44:         PostMessage(GetCurrentColumn(),"found operator symbol");
               A           B                   C     D        E
    -A Token#=3, Length=11, Text="PostMessage"
    -B Token#=3, Length=16, Text="GetCurrentColumn"
    -C Token#=3, Length=5, Text="found"
    -D Token#=3, Length=8, Text="operator"
    -E Token#=3, Length=6, Text="symbol"

   45:       }
            A
    -A Token#=6, Length=1, Text="}"

   46:    }
         A
    -A Token#=6, Length=1, Text="}"

   47:     CloseFiles();
           A
    -A Token#=3, Length=10, Text="CloseFiles"

   48:   }
        A
    -A Token#=6, Length=1, Text="}"

   49:   else {
         A   B
    -A Token#=3, Length=4, Text="else"
    -B Token#=7, Length=1, Text="{"

   50:     printf("Files could not be opened.\n"); // Neither should this. 
           A       B     C     D   E  F       G
    -A Token#=3, Length=6, Text="printf"
    -B Token#=3, Length=5, Text="Files"
    -C Token#=3, Length=5, Text="could"
    -D Token#=3, Length=3, Text="not"
    -E Token#=3, Length=2, Text="be"
    -F Token#=3, Length=6, Text="opened"
    -G Token#=3, Length=1, Text="n"

   51:   }

        A
    -A Token#=6, Length=1, Text="}"

   52:   exit(0);
         A    B
    -A Token#=3, Length=4, Text="exit"
    -B Token#=4, Length=1, Text="0"

   53: }
      A
    -A Token#=6, Length=1, Text="}"

   54: $DUMP      A
    -A Token#=2, Length=5, Text="$DUMP"

